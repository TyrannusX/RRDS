//package rrdsclient;

import java.io.*;
import java.net.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author dariusstephen
 */
public class HomeFrame extends javax.swing.JFrame {
    private Socket socket; //client socket
    private BufferedReader in; //socket input stream
    private PrintWriter out; //socket output stream
    private String response; //string that holds messages from server
    private int filenum; //file number
    private DateFormat df; //date format
    private SimpleDateFormat sf; //date format
    private StringBuilder sb; //string builder
    private Date emaildate; //email date
    private DefaultListModel listModel; //lisa model
    private String username; //username
    private boolean isInInbox; //flag to determine if user is viewing inbox
    private boolean isInSent; //flag to determine if user is viewing sent
    
    /**
     * Creates new form HomeFrame
     * @param socketIn
     */
    
    public HomeFrame(Socket socketIn, String usernameIn) {
        try {
            socket = socketIn; //get socket
            in = new BufferedReader(new InputStreamReader(socket.getInputStream())); //get input stream
            out = new PrintWriter(socket.getOutputStream(), true); //get output stream
            initComponents(); //initialize gui
            initVariables(); //initialize class variables
            username = usernameIn; //get username
            lblName.setText(username); //set the welcome label to username
            replyButton.setEnabled(false); //disable reply button
            sendButton.setEnabled(false); //disable send button
            deleteButton.setEnabled(false); //disable delete button
        } 
        catch (IOException e) {
            System.out.println("inithome failed");
        }
    }
    
    private void initVariables() {
        df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        sf = new SimpleDateFormat("mm/dd/yy HH:mm");
        isInInbox = false;
        isInSent = false;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        tbHome = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        panelHome = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listFolder = new javax.swing.JList();
        spSubject = new javax.swing.JScrollPane();
        listSubject = new javax.swing.JList();
        panelContent = new javax.swing.JPanel();
        lblFrom = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        lblSubject = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblBody = new javax.swing.JLabel();
        dateTextField = new javax.swing.JTextField();
        toTextField = new javax.swing.JTextField();
        fromTextField = new javax.swing.JTextField();
        subjectTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        bodyTextArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        replyButton = new javax.swing.JButton();
        btnCompose = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(45, 51, 56));
        setMinimumSize(new java.awt.Dimension(670, 450));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tbHome.setRollover(true);

        jLabel1.setText("   Welcome, ");
        tbHome.add(jLabel1);

        lblName.setText("Lastname");
        tbHome.add(lblName);

        listFolder.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Inbox", "Sent" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listFolderMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listFolder);

        listSubject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listSubjectMouseClicked(evt);
            }
        });
        spSubject.setViewportView(listSubject);

        panelContent.setBackground(new java.awt.Color(255, 255, 255));
        panelContent.setForeground(new java.awt.Color(255, 255, 255));

        lblFrom.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        lblFrom.setText("From");

        lblTo.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        lblTo.setText("To");

        lblSubject.setText("Subject");

        lblDate.setText("Date");

        lblBody.setText("Body");

        subjectTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectTextFieldActionPerformed(evt);
            }
        });

        bodyTextArea.setColumns(20);
        bodyTextArea.setLineWrap(true);
        bodyTextArea.setRows(5);
        jScrollPane1.setViewportView(bodyTextArea);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        replyButton.setText("Reply");
        replyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replyButtonActionPerformed(evt);
            }
        });

        btnCompose.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnCompose.setText("Compose");
        btnCompose.setFocusable(false);
        btnCompose.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCompose.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCompose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComposeActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelContentLayout = new javax.swing.GroupLayout(panelContent);
        panelContent.setLayout(panelContentLayout);
        panelContentLayout.setHorizontalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelContentLayout.createSequentialGroup()
                        .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContentLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(deleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCompose)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(replyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendButton)))
                        .addContainerGap())
                    .addGroup(panelContentLayout.createSequentialGroup()
                        .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                            .addComponent(lblTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateTextField)
                            .addComponent(toTextField)))
                    .addGroup(panelContentLayout.createSequentialGroup()
                        .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblBody, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblFrom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSubject, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromTextField)
                            .addComponent(subjectTextField)))))
        );
        panelContentLayout.setVerticalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTo)
                    .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFrom)
                    .addComponent(fromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubject)
                    .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBody)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCompose)
                    .addComponent(deleteButton)
                    .addGroup(panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sendButton)
                        .addComponent(replyButton))))
        );

        javax.swing.GroupLayout panelHomeLayout = new javax.swing.GroupLayout(panelHome);
        panelHome.setLayout(panelHomeLayout);
        panelHomeLayout.setHorizontalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomeLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelHomeLayout.setVerticalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHomeLayout.createSequentialGroup()
                .addGroup(panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spSubject, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelHomeLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(panelContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tbHome, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                        .addGap(561, 561, 561))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbHome, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //event for clicking either "inbox" or "sent"
    private void listFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listFolderMouseClicked
        // TODO add your handling code here:
        //disable text fields
        dateTextField.setEditable(false);
        toTextField.setEditable(false);
        fromTextField.setEditable(false);
        subjectTextField.setEditable(false);
        bodyTextArea.setEditable(false);
        
        //get the index of the selected folder
        int currentIndex = listFolder.getSelectedIndex();
        
        //check which folder the user clicked
        switch(currentIndex) {
            //inbox
            case 0:
                //send a getinbox request to the server
                out.println("getinbox");
                isInInbox = true;
                isInSent = false;
                break;
            //sent
            case 1:
                //send a getsent request to the server
                out.println("getsent");
                isInInbox = false;
                isInSent = true;
                break;
            default:
                out.println("noreq");
                break;
        }
        
        populateEmailList();
    }//GEN-LAST:event_listFolderMouseClicked
    
    //method to display all emails in the email list
    private void populateEmailList() {
        // Get the number of files from server
        try {
            response = in.readLine();
            filenum = Integer.parseInt(response);
        } catch (IOException ex) {
            Logger.getLogger(HomeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Instantiate listmodel for jlist and its stringbuilder
        listModel = new DefaultListModel();
        sb = new StringBuilder();
        
        // Process requested emails from server
        for(int i = 0; i < filenum; i++) {
            try {
                sb.append("<html>");
                // Get the datetime of message
                response = in.readLine();
                sb.append(response);
                /*try {
                    emaildate = df.parse(response);
                    sb.append(emaildate.toString());
                } catch (ParseException ex) {
                    Logger.getLogger(HomeFrame.class.getName())
                            .log(Level.SEVERE, null, ex);
                }*/
                sb.append("<br>");
                
                // Get the 'to' field of the message
                response = in.readLine();
                sb.append(response);
                sb.append("<br>");               

                // Get the 'from' field of the message
                response = in.readLine();
                sb.append(response);
                sb.append("<br>");

                // Get the subject of the message
                response = in.readLine();
                sb.append(response);
                sb.append("<br>");

                // Get the body of the message
                response = in.readLine();
                sb.append(response);
                sb.append("<br>");
                sb.append("<hr>");
                sb.append("</html>");
            }
            catch (IOException e) {
                System.out.println("Error occurred while reading from server");
            }
            // Add stringbuilder to listmodel
            listModel.addElement(sb.toString());
            
            // Reset stringbuilder
            sb.setLength(0);
        } // forloop end
        listSubject.setModel(listModel);
    }
    
    //event that is called when clicking an email
    private void listSubjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSubjectMouseClicked
        //disable all text fields
        dateTextField.setEditable(false);
        toTextField.setEditable(false);
        fromTextField.setEditable(false);
        subjectTextField.setEditable(false);
        bodyTextArea.setEditable(false);
        
        //get the selected email
        String selectedMessage = listSubject.getSelectedValue().toString();
        
        //set text fields to empty
        dateTextField.setText("");
        toTextField.setText("");
        fromTextField.setText("");
        subjectTextField.setText("");
        bodyTextArea.setText("");
        
        //disable send, reply, and delete button
        sendButton.setEnabled(false);
        replyButton.setEnabled(true);
        deleteButton.setEnabled(true);
        
        //remove the <html> tags and then <br> tags in email
        String[] ditchHtml = selectedMessage.split("<html>");
        String[] splitted = ditchHtml[1].split("<br>");
        
        bodyTextArea.setText(selectedMessage);
        
        //for loop to set date, to, from, subject, and body text fields
        for(int i = 0; i < 5; i++)
        {
            switch(i){
                case 0:
                    dateTextField.setText(splitted[i]);
                    break;
                case 1:
                    toTextField.setText(splitted[i]);
                    break;
                case 2:
                    fromTextField.setText(splitted[i]);
                    break;    
                case 3:
                    subjectTextField.setText(splitted[i]);
                    break;
                case 4:
                    bodyTextArea.setText(splitted[i]);
                    break;    
            }
        }
    }//GEN-LAST:event_listSubjectMouseClicked

    //compose button event
    private void btnComposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComposeActionPerformed
        //enable text fields
        dateTextField.setEditable(true);
        toTextField.setEditable(true);
        fromTextField.setEditable(true);
        subjectTextField.setEditable(true);
        bodyTextArea.setEditable(true);
        
        //get current date and assign to date
        Calendar currentDateTime = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        dateTextField.setText(currentDateTime.getTime().toString());
        
        //set text fields to default values
        toTextField.setText("");
        fromTextField.setText(username);
        subjectTextField.setText("");
        bodyTextArea.setText("");
        
        //enable send button and disable reply and delete
        sendButton.setEnabled(true);
        replyButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }//GEN-LAST:event_btnComposeActionPerformed

    private void subjectTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectTextFieldActionPerformed

    //send button event
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        //disable all text fields
        dateTextField.setEditable(false);
        toTextField.setEditable(false);
        fromTextField.setEditable(false);
        subjectTextField.setEditable(false);
        bodyTextArea.setEditable(false);
        
        //get all the strings from the separate fields
        String date = dateTextField.getText();
        String to = toTextField.getText();
        String from = fromTextField.getText();
        String subject = subjectTextField.getText();
        String body = bodyTextArea.getText();
        String messagePassing = "";
        
        //if any of the fields are empty
        if(date.equals("") || to.equals("") || from.equals("") || subject.equals("") || body.equals("")){
            //show error dialog
            JOptionPane.showMessageDialog(this, "Missing Field(s)");
        }
        else{
            System.out.printf("%s", body);
            if(body.contains("\n")){
                System.out.println("NEWLINE FOUND");
                String[] ditchNewline = body.split("\n");
                body = "";
                for(int i = 0; i < ditchNewline.length; i++){
                    body += ditchNewline[i];
                    body += " ";
                }
            }
            //add <br> tag between message fields
            messagePassing += date;
            messagePassing += "<separator>";
            messagePassing += to;
            messagePassing += "<separator>";
            messagePassing += from;
            messagePassing += "<separator>";
            messagePassing += subject;
            messagePassing += "<separator>";
            messagePassing += body;

            //append the <pushfile> command to the message
            messagePassing += "<pushfile>";
            
            //send formatted message to server
            out.println("" + messagePassing);
            
            //reset text fields
            dateTextField.setText("");
            toTextField.setText("");
            fromTextField.setText("");
            subjectTextField.setText("");
            bodyTextArea.setText("");
            sendButton.setEnabled(false);
            replyButton.setEnabled(false);
            deleteButton.setEnabled(false);
            
            if(isInInbox){
                // Refresh list
                out.println("getinbox");
                populateEmailList();
            }
            else if(isInSent){
                // Refresh list
                out.println("getsent");
                populateEmailList();
            }
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    //reply button event
    private void replyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replyButtonActionPerformed
        //enable all text fields
        dateTextField.setEditable(true);
        toTextField.setEditable(true);
        fromTextField.setEditable(true);
        subjectTextField.setEditable(true);
        bodyTextArea.setEditable(true);
        sendButton.setEnabled(true);
        replyButton.setEnabled(false);
        deleteButton.setEnabled(false);
        
        //if the user is currently in inbox
        if(isInInbox){
            //get current time
            Calendar currentDateTime = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
            dateTextField.setText(currentDateTime.getTime().toString());

            //swap the to and from fields
            String swap = toTextField.getText();
            toTextField.setText(fromTextField.getText());
            fromTextField.setText(swap);

            //if the current subject does not contain Re: then add it
            if(!subjectTextField.getText().contains("Re:")){
                subjectTextField.setText(String.format("Re:%s", subjectTextField.getText()));
            }

            //set body to empty
            bodyTextArea.setText("");
        }
        else{
            //get the current time
            Calendar currentDateTime = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
            dateTextField.setText(currentDateTime.getTime().toString());

            //if the current subject does not contain Re: then add it
            if(!subjectTextField.getText().contains("Re:")){
                subjectTextField.setText(String.format("Re:%s", subjectTextField.getText()));
            }

            //set body to empty
            bodyTextArea.setText("");
        }
    }//GEN-LAST:event_replyButtonActionPerformed

    //delete button event
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        //setup the filename to pass to the server
        String messagePassing = dateTextField.getText();
        messagePassing += ".xml";
        
        //if the user is currently in inbox
        if(isInInbox) {
            //add <deletefileinbox> command to message and pass message to server
            messagePassing += "<deletefileinbox>";
            out.println("" + messagePassing);
            
            // Refresh list
            out.println("getinbox");
            populateEmailList();
        }
        //if the user is currently in sent
        else if(isInSent) {
            //add <deletefilesent> command to message and pass message to server
            messagePassing += "<deletefilesent>";
            out.println("" + messagePassing);
            
            // Refresh list
            out.println("getsent");
            populateEmailList();
        }
        
        //set text fields to empty
        dateTextField.setText("");
        toTextField.setText("");
        fromTextField.setText("");
        subjectTextField.setText("");
        bodyTextArea.setText("");
    }//GEN-LAST:event_deleteButtonActionPerformed

    //closed window event
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        //send <exit> command to server
        out.println("<exitloop>");
        try {
            //close socket
            socket.close();
        } 
        catch (IOException ex) {
            Logger.getLogger(HomeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed

    /*
    public static void main(String args[]) {     
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrame().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea bodyTextArea;
    private javax.swing.JButton btnCompose;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField fromTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblBody;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblTo;
    private javax.swing.JList listFolder;
    private javax.swing.JList listSubject;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelHome;
    private javax.swing.JButton replyButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JScrollPane spSubject;
    private javax.swing.JTextField subjectTextField;
    private javax.swing.JToolBar tbHome;
    private javax.swing.JTextField toTextField;
    // End of variables declaration//GEN-END:variables
}
